# -*- coding: utf-8 -*-
"""Untitled37.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rfIty2xr04StxKdItR0hVVAWnVhsUf7g
"""

from flask import Flask, request, send_file, jsonify
from obspy import read
import requests
import io
import datetime
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # Para evitar problemas de GUI en entornos sin pantalla
from flask_cors import CORS  # Habilitar CORS para todas las rutas

app = Flask(__name__)
CORS(app)  # Habilita CORS para todas las rutas

# Función auxiliar para calcular la diferencia de tiempo
def calculate_time_difference(start, end):
    start_time = datetime.datetime.fromisoformat(start)
    end_time = datetime.datetime.fromisoformat(end)
    return (end_time - start_time).total_seconds() / 60  # Diferencia en minutos

# Diccionario de canales asociados a cada estación
station_channels = {
    'UIS01': ['HNE', 'HNN', 'HNZ'],
    'UIS05': ['EHZ', 'ENE', 'ENN', 'ENZ'],
    'UIS06': ['EHE', 'EHN', 'EHZ'],
    # Agregar otras estaciones y sus canales aquí
}

# Ruta principal para manejar gráficos dinámicamente
@app.route('/generate_graph', methods=['GET'])
def generate_graph():
    try:
        # Obtener parámetros de la solicitud
        start = request.args.get('start')
        end = request.args.get('end')
        net = request.args.get('net')
        sta = request.args.get('sta')
        loc = request.args.get('loc')
        cha = request.args.get('cha')

        # Verificar que todos los parámetros estén presentes
        if not all([start, end, net, sta, loc, cha]):
            return jsonify({"error": "Faltan parámetros requeridos"}), 400

        # Verificar si la estación es válida
        if sta not in station_channels:
            return jsonify({"error": "Estación no válida"}), 400

        # Identificar los canales asociados a la estación
        selected_channels = station_channels[sta]

        # Si el canal elegido es uno de los disponibles, obtener los otros canales
        if cha not in selected_channels:
            return jsonify({"error": "Canal seleccionado no válido para esta estación"}), 400

        # Generar los sismogramas para los canales asociados
        sismograms = []
        for channel in selected_channels:
            sismogram_image = generate_sismograma(net, sta, loc, channel, start, end)
            sismograms.append(sismogram_image)

        # Si el intervalo es mayor a 30 minutos, generar helicorder
        interval_minutes = calculate_time_difference(start, end)
        if interval_minutes > 30:
            helicorder_image = generate_helicorder(net, sta, loc, cha, start, end)
            return jsonify({"sismograms": sismograms, "helicorder": helicorder_image})

        return jsonify({"sismograms": sismograms})

    except Exception as e:
        return jsonify({"error": f"Ocurrió un error: {str(e)}"}), 500

# Función para generar un sismograma
def generate_sismograma(net, sta, loc, cha, start, end):
    try:
        # Construir la URL para descargar datos
        url = f"http://osso.univalle.edu.co/fdsnws/dataselect/1/query?starttime={start}&endtime={end}&network={net}&station={sta}&location={loc}&channel={cha}&nodata=404"
        
        # Realizar la solicitud al servidor remoto
        response = requests.get(url)
        if response.status_code != 200:
            return jsonify({"error": f"Error al descargar datos: {response.status_code}"}), 500

        # Procesar los datos MiniSEED
        mini_seed_data = io.BytesIO(response.content)
        try:
            st = read(mini_seed_data)
        except Exception as e:
            return jsonify({"error": f"Error procesando MiniSEED: {str(e)}"}), 500

        # Crear gráfico del sismograma
        tr = st[0]
        start_time = tr.stats.starttime.datetime
        times = [start_time + datetime.timedelta(seconds=sec) for sec in tr.times()]
        data = tr.data

        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(times, data, linewidth=0.8)
        ax.set_title(f"Sismograma {cha} ({sta})\nRed Sísmica REDNE\n{start} - {end}")
        ax.set_xlabel("Tiempo (UTC Colombia)")
        ax.set_ylabel("Amplitud (M/s)")
        fig.autofmt_xdate()

        # Agregar URL del canal en la esquina inferior izquierda
        ax.text(0.02, 0.02, f"URL ({cha}): {url}", transform=ax.transAxes, fontsize=8, verticalalignment='bottom', bbox=dict(facecolor='white', edgecolor='black'))

        # Guardar el gráfico en memoria
        output_image = io.BytesIO()
        plt.savefig(output_image, format='png', dpi=100, bbox_inches="tight")
        output_image.seek(0)
        plt.close(fig)

        return output_image  # Retorna la imagen generada

    except Exception as e:
        return jsonify({"error": f"Ocurrió un error: {str(e)}"}), 500

# Función para generar un helicorder
def generate_helicorder(net, sta, loc, cha, start, end):
    try:
        # Construir la URL para descargar datos
        url = f"http://osso.univalle.edu.co/fdsnws/dataselect/1/query?starttime={start}&endtime={end}&network={net}&station={sta}&location={loc}&channel={cha}&nodata=404"
        
        # Realizar la solicitud al servidor remoto
        response = requests.get(url)
        if response.status_code != 200:
            return jsonify({"error": f"Error al descargar datos: {response.status_code}"}), 500

        # Procesar los datos MiniSEED
        mini_seed_data = io.BytesIO(response.content)
        try:
            st = read(mini_seed_data)
        except Exception as e:
            return jsonify({"error": f"Error procesando MiniSEED: {str(e)}"}), 500

        # Crear helicorder utilizando ObsPy
        fig = st.plot(
            type="dayplot",
            interval=15,
            right_vertical_labels=True,
            vertical_scaling_range=2000,
            color=['k', 'r', 'b'],
            show_y_UTC_label=True,
            one_tick_per_line=True
        )

        # Ajustar el tamaño del helicorder
        fig.set_size_inches(12, 4)

        # Guardar el gráfico en memoria
        output_image = io.BytesIO()
        fig.savefig(output_image, format='png', dpi=120, bbox_inches="tight")
        output_image.seek(0)
        plt.close(fig)

        return output_image  # Retorna la imagen generada

    except Exception as e:
        return jsonify({"error": f"Ocurrió un error: {str(e)}"}), 500

# Punto de entrada del servidor Flask
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


